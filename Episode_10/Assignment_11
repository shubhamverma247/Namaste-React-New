1. What is props drilling?
Props are the data we pass or can access from the top-level components to any number of child components.
Props Drilling is a concept that refers to the process you pass the data from the parent component to the exact child Component BUT in between, other components own the props just to pass it down the chain. It is simply passing down props to child components.
For example if we have 3 components ParentComponent, ChildComponent, SubChildComponent 
<ParentComponent/>
    <ChildComponent/>
        <SubChildComponent/>
and if we need to pass props from ParentComponent to SubChildComponent we would require to send the props through ChildComponent.


2. What is lifting up the state?
Lifting state up occurs when state is placed in a common ancestor (or parent) of child components. Because each child component has access to the parent they will then have access to state. If state is updated inside the child component it is lifted back up to the parent container.


3. What are Context Provider and Context Consumer?
We can pass data via props to components, but if the component tree is deep and we want to pass data, we have to use a prop chain. This is something unnecessary because some components do not need any props at all but we have to pass. This is where React Context comes into picture.
The React Context provides data to components no matter how deep they are in the component tree. The context is used to manage the global state where components can access.
• Context Provider -
Context Provider is used to provide access to a context between multiple components of the application. We can provide the access to the context or the data layer to the whole application and its subcomponents.

For example:
return (
  <UserContext.Provider value={{ user : user, setUser : setUser }}>
    <Header />
    <Outlet />
    <Footer />
  </UserContext.Provider>
);
In the code above , we are providing the access of UserContext to <Header /> <Outlet /> and <Footer /> component.

• Context Consumer -
Context Consumer is used to consume the context data , provided by react context. We can do this using useContext hook for functional components and Context.Consumer in class based components.

For example:

In Class based components, we can use the Context and use the consumer.
<UserContext.Consumer>
  {({ user }) => <h1>{user.name}</h1>}
</UserContext.Consumer>

In Functional components we can use useContext hook to consume the context.
import UserContext from "../utils/UserContext";
import { useContext } from "react";

const { user } = useContext(UserContext);


4. If you don't pass a value to the provider does it take the default value?
It will use the default values of the context when initializing it if we do not override them. 
