1. What is Microservices

Microservices refer to a style of application architecture where a collection of independent services communicate through lightweight APIs.
A microservices architecture is a cloud-native approach to building software in a way that allows for each core function within an application to exist independently. 

When elements of an application are segregated in this way, it allows for development and operations teams to work in tandem without getting in the way of one another. This means more developers working on the same app, at the same time, which results in less time spent in development.



Monolithic architecture vs microservices architecture
The traditional approach to building applications has focused on the monolith. In a monolithic architecture, all the functions and services within an application are locked together, operating as a single unit. When the application is added to or improved upon in any way, the architecture grows more complex. This makes it more difficult to optimize any singular function within the application without taking the entire application apart. This also means that if one process within the application needs to be scaled, the entire application must be scaled as well.

In microservices architectures, applications are built so that each core function within the app runs independently. This allows development teams to build and update new components to meet changing business needs without disrupting the application as a whole.

4.Why do you use useEffect

By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.

5.what is optional chaining

The optional chaining operator (?.) allows you to access the value of a property located deep within a chain of objects without explicitly checking if each reference in the chain is null or undefined.

If one of the references in the chain is null or undefined, the optional chaining operator (?.) will short circuit and return undefined.

What is Shimmer UI?
A: A Shimmer UI resembles the page's actual UI, so users will understand how quickly the web or mobile app will load even before the content has shown up. It gives people an idea of what's about to come and what's happening (while UI currently loading) when a page full of content/data takes more than 3 - 5 seconds to load. Shimmer UI is a great way for loading the applications. Instead of showing a loading circle we can design a shimmer UI for our application that is good for user experience.

What is the difference between JS expression and JS statement?

A: A JS expression returns a value that we use in the application. for example:

1 + 2 // expresses "foo".toUpperCase() // expresses 'FOO' console.log(2) // logs '2' isTrue ? true : false // returns us a true or false value based on isTrue value A JS statement, does not return a value. for example:

let x; // variable declaration if () { } // if condition If we want to use JS expression in JSX, we have to wrap in {/* expression slot /} and if we want to use JS statement in JSX, we have to wrap in {(/ statement slot */)};

So a statement is an instruction unit telling computer what to DO. for statement, while statement, if statement, they are all actions, in another word tasks, or behaviors.

But for expression, we are talking about values, valuables, objects, or some procedures that can produce a value, like function.

1 + 2 (2 + 3) * 5 === 25 new Foo()

So Javascript also has function expression. Because function is a value. In the following code,

The entire snippet is a statement.
Everything after = is an expression.
return width * height; is nested statement.
width * height is an expression.
const rectArea = function(width, height) { return width * height; };

What is Conditional Rendering? explain with a code example.
A: Rendering the data on the basis of the condition is called conditional rendering. Conditional rendering in React works the same way as conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and React update the UI to match them. for example:

// Using Ternary operator as a shorthand way or writing an if-else statement
{isLoggedIn ? (return <UserGreeting />) : (return <GuestGreeting />)};
// Using an if…else Statement
{
  (if (isLoggedIn) {
    return <UserGreeting />;
  }else {
    return <GuestGreeting />;
  })
}
// Using Logical &&
{isLoggedIn && <button>Logout</button>}

What is `CORS`?
A: Cross-origin resource sharing (CORS) is a mechanism for integrating applications. CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different domain.
CORS provides a number of benefits: It allows browsers to enforce the same-origin policy, which is a security measure that prevents a malicious script from accessing resources that it should not have access. It allows restricted resources on a web page to be requested from another domain.


What is `async and await`?
A: `Async`: It simply allows us to write promises-based code. The async keyword is used to declare an asynchronous function, which is a function that returns a promise and can be awaited. Asynchronous functions are used to perform long-running tasks in the background, such as making network requests or reading from a file, without blocking the main thread of execution.
`Await`: Await function is used to wait for the promise. It could be used within the `async` block only. It makes the code wait until the promise returns a result. It only makes the async block wait.
The await keyword is used inside an asynchronous function to pause the execution of the function until a promise is resolved. It allows you to write asynchronous code in a synchronous-like style, making it easier to read and write. Using async and await makes it easy to write asynchronous code that is simple and easy to understand, 
for example:
// async function getRestaurant to fetch Swiggy API data async function getRestaurants() { const data = await fetch( "Swiggy_API_URL" ); const json = await data.json(); // we get the Swiggy API data in json format console.log(json); }


## Q: What is the use of `const json = await data.json()`; in `getRestaurants()`?
A: The `response` object, returned by the `await fetch()`, does not directly return the JSON response body but instead returns a promise that resolves with a Response object..
The Response object, in turn, does not directly contain the actual JSON response body but is instead a representation of the entire HTTP response. So, to extract the JSON body content from the Response object, we use the `json()` method, which returns a second promise that resolves with the result of parsing the response body text as JSON. For this we have used `await` keyword. so `data.json()` returns a promise resolved to a `JSON object`.
